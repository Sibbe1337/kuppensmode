    rules_version = '2';
    service cloud.firestore {
      match /databases/{database}/documents {
        // Allow users to read and write their own data in the 'users' collection
        // and its subcollections
        match /users/{userId} {
          allow read, write: if request.auth.uid == userId;

          // Sub-collections automatically inherit that condition.
          // No need to explicitly grant access if the parent rule is sufficient.
          // However, if you want to be explicit or add different conditions for subcollections:
          match /integrations/{integrationId} {
            allow read, write: if request.auth.uid == userId;
          }
          match /snapshots/{snapshotId} {
            allow read, write: if request.auth.uid == userId;
          }
          match /restores/{restoreId} {
            allow read, write: if request.auth.uid == userId;
            // Consider if restores should have more restrictive write access, 
            // e.g., only allow create, or specific fields for update.
          }
          // Add other sub-collections here as needed, e.g., settings, quotas
          match /settings/{docId} { // Assuming settings might be a single doc or a collection
            allow read, write: if request.auth.uid == userId;
          }
          match /quota/{docId} { // Assuming quota might be a single doc or a collection
            allow read, write: if request.auth.uid == userId;
          }
          // Generic rule for any other sub-collections under a user
          match /{document=**} {
            allow read, write: if request.auth.uid == userId;
          }
        }

        // Rules for user storage provider configurations
        match /userStorageConfigs/{userId} {
          // This top-level document for a user (if it were to exist) can be managed by the user.
          // However, data is primarily in the subcollection.
          allow read, write: if request.auth.uid == userId;

          match /providers/{providerConfigId} {
            // User can create, read, update, delete their own provider configurations
            allow read, write: if request.auth.uid == userId;

            // Allow admin/worker (with custom admin claim) to read provider configurations
            // This is for the snapshot-worker to fetch credentials for replication.
            allow get, list: if request.auth.uid == userId || request.auth.token.admin == true;
          }
        }

        // It's good practice to deny all other access by default if not explicitly allowed.
        // However, be careful with this if you have other top-level collections 
        // that need different access rules (e.g., public data, admin collections).

        // Example: If you have a public collection for general app configuration:
        // match /app-config/{configId} {
        //   allow read: if true;
        //   allow write: if false; // Or admin only
        // }
      }
    }